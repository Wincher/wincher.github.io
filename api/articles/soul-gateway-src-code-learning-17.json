{"title":"soul_gateway_src_code_learning_17","slug":"soul-gateway-src-code-learning-17","date":"2021-02-04T10:49:23.000Z","updated":"2021-02-04T23:02:03.112Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-resilience4j-plugin\"><a href=\"#SOUL-resilience4j-plugin\" class=\"headerlink\" title=\"SOUL resilience4j plugin\"></a>SOUL resilience4j plugin</h3><p>首先启动项目 soul-admin, soul-bootstrap，以<code>soul-examples</code>中的<code>soul-example-http</code>为例，注册到soul网关上。检查soul-bootstrap的<code>pom</code>文件中是否引入相关依赖：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-resilience4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{project.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</span></code></pre>\n<p>然后再SOUL admin中开启 resilient4j plugin</p>\n<p>同时配置selector以及相关rule, 制定相应的熔断策略, 相关 selector 配置</p>\n<p><a href=\"https://dromara.org/zh/projects/soul/resilience4j-plugin/\" target=\"_blank\" rel=\"external\">reference</a></p>\n<h1 id=\"探究Resilient4j插件\"><a href=\"#探究Resilient4j插件\" class=\"headerlink\" title=\"探究Resilient4j插件\"></a>探究Resilient4j插件</h1><p>Resilient4j plugin与其他插件一样继承了AbstractSoulPlugin, 核心逻辑如下</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">protected</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; doExecute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> SelectorData selector, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n        <span class=\"hljs-keyword\">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != <span class=\"hljs-literal\">null</span>;\n      <span class=\"hljs-comment\">//soul-admin同步来的json串生成Resilience4JHandle, 包含所有在soul-admin中的相关参数信息</span>\n        Resilience4JHandle resilience4JHandle = GsonUtils.getGson().fromJson(rule.getHandle(), Resilience4JHandle.<span class=\"hljs-keyword\">class</span>);\n      <span class=\"hljs-comment\">//然后根据getCircuitEnable来确定是否创建熔断和限流的组合控件还是仅创建限流控件</span>\n        <span class=\"hljs-keyword\">if</span> (resilience4JHandle.getCircuitEnable() == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> combined(exchange, chain, rule);\n        }\n        <span class=\"hljs-keyword\">return</span> rateLimiter(exchange, chain, rule);\n    }\n</code></pre>\n<p> CombinedExecutor和 RateLimiterExecutor<br>对于combined方法，核心代码如下</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; rateLimiter(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n        <span class=\"hljs-keyword\">return</span> ratelimiterExecutor.run(\n                chain.execute(exchange), fallback(ratelimiterExecutor, exchange, <span class=\"hljs-literal\">null</span>), Resilience4JBuilder.build(rule))\n                .onErrorResume(throwable -&gt; ratelimiterExecutor.withoutFallback(exchange, throwable));\n    }\n\n    <span class=\"hljs-keyword\">private</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; combined(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n        Resilience4JConf conf = Resilience4JBuilder.build(rule);\n        <span class=\"hljs-keyword\">return</span> combinedExecutor.run(\n                chain.execute(exchange).doOnSuccess(v -&gt; {\n                    HttpStatus status = exchange.getResponse().getStatusCode();\n                    <span class=\"hljs-keyword\">if</span> (status == <span class=\"hljs-literal\">null</span> || !status.is2xxSuccessful()) {\n                        exchange.getResponse().setStatusCode(<span class=\"hljs-literal\">null</span>);\n                        <span class=\"hljs-keyword\">throw</span> new CircuitBreakerStatusCodeException(status == <span class=\"hljs-literal\">null</span> ? HttpStatus.INTERNAL_SERVER_ERROR : status);\n                    }\n                }), fallback(combinedExecutor, exchange, conf.getFallBackUri()), conf);\n    }\n</code></pre>\n<p> combinedExecutor 具体逻辑</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CombinedExecutor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Executor</span> {</span>\n\n    @Override\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; Mono&lt;T&gt; run(<span class=\"hljs-keyword\">final</span> Mono&lt;T&gt; run, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">Function</span>&lt;<span class=\"hljs-title\">Throwable</span>, <span class=\"hljs-title\">Mono</span>&lt;<span class=\"hljs-title\">T</span>&gt;&gt; <span class=\"hljs-title\">fallback</span>, <span class=\"hljs-title\">final</span> <span class=\"hljs-title\">Resilience4JConf</span> <span class=\"hljs-title\">resilience4JConf</span>) {</span>\n      //调用 Resilience4J 创建熔断器和限流器\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(resilience4JConf.getId(), resilience4JConf.getRateLimiterConfig());\n        CircuitBreaker circuitBreaker = Resilience4JRegistryFactory.circuitBreaker(resilience4JConf.getId(), resilience4JConf.getCircuitBreakerConfig());\n        Mono&lt;T&gt; <span class=\"hljs-keyword\">to</span> = run.transformDeferred(CircuitBreakerOperator.of(circuitBreaker))\n                .transformDeferred(RateLimiterOperator.of(rateLimiter))\n                .timeout(resilience4JConf.getTimeLimiterConfig().getTimeoutDuration())\n                .doOnError(TimeoutException.class, t -&gt; circuitBreaker.onError(\n                        resilience4JConf.getTimeLimiterConfig().getTimeoutDuration().toMillis(),\n                        TimeUnit.MILLISECONDS,\n                        t));\n        <span class=\"hljs-keyword\">if</span> (fallback != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">to</span> = <span class=\"hljs-keyword\">to</span>.onErrorResume(fallback);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">to</span>;\n    }\n}\n</code></pre>\n<p>上面的 rateLimit和combined 方法都可以看到Resilience4JBuilder来生成Resilience4JConf, 这里通过SOUL的配置构建TimeLimiterConfig, CircuitBreakerConfig,RateLimiterConfig供调用Resilience4J使用</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> static Resilience4JConf build(final RuleData ruleData) {\n        Resilience4JHandle <span class=\"hljs-keyword\">handle</span> = GsonUtils.getGson().fromJson(ruleData.getHandle(), Resilience4JHandle.class);\n        CircuitBreakerConfig circuitBreakerConfig = <span class=\"hljs-built_in\">null</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">handle</span>.getCircuitEnable() == <span class=\"hljs-number\">1</span>) {\n            circuitBreakerConfig = CircuitBreakerConfig.custom()\n                    .recordExceptions(Throwable.class, Exception.class)\n                    .failureRateThreshold(<span class=\"hljs-keyword\">handle</span>.getFailureRateThreshold())\n                    .automaticTransitionFromOpenToHalfOpenEnabled(<span class=\"hljs-keyword\">handle</span>.getAutomaticTransitionFromOpenToHalfOpenEnabled())\n                    .slidingWindow(<span class=\"hljs-keyword\">handle</span>.getSlidingWindowSize(), <span class=\"hljs-keyword\">handle</span>.getMinimumNumberOfCalls(),\n                            <span class=\"hljs-keyword\">handle</span>.getSlidingWindowType() == <span class=\"hljs-number\">0</span>\n                                    ? CircuitBreakerConfig.SlidingWindowType.COUNT_BASED\n                                    : CircuitBreakerConfig.SlidingWindowType.TIME_BASED).waitIntervalFunctionInOpenState(IntervalFunction\n                            .of(<span class=\"hljs-built_in\">Duration</span>.ofSeconds(<span class=\"hljs-keyword\">handle</span>.getWaitIntervalFunctionInOpenState() / <span class=\"hljs-number\">1000</span>)))\n                    .permittedNumberOfCallsInHalfOpenState(<span class=\"hljs-keyword\">handle</span>.getPermittedNumberOfCallsInHalfOpenState()).build();\n        }\n        TimeLimiterConfig timeLimiterConfig = TimeLimiterConfig.custom()\n                .timeoutDuration(<span class=\"hljs-built_in\">Duration</span>.ofSeconds(<span class=\"hljs-keyword\">handle</span>.getTimeoutDuration() / <span class=\"hljs-number\">1000</span>)).build();\n        RateLimiterConfig rateLimiterConfig = RateLimiterConfig.custom()\n                .limitForPeriod(<span class=\"hljs-keyword\">handle</span>.getLimitForPeriod())\n                .timeoutDuration(<span class=\"hljs-built_in\">Duration</span>.ofSeconds(<span class=\"hljs-keyword\">handle</span>.getTimeoutDurationRate() / <span class=\"hljs-number\">1000</span>))\n                .limitRefreshPeriod(<span class=\"hljs-built_in\">Duration</span>.ofNanos(<span class=\"hljs-keyword\">handle</span>.getLimitRefreshPeriod() * <span class=\"hljs-number\">1000000</span>)).build();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">new</span> Resilience4JConf(Resilience4JHandler.getResourceName(ruleData), <span class=\"hljs-keyword\">handle</span>.getFallbackUri(), rateLimiterConfig, timeLimiterConfig, circuitBreakerConfig);\n    }\n</code></pre>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}