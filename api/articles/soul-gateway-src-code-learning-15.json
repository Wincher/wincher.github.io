{"title":"soul_gateway_src_code_learning_15","slug":"soul-gateway-src-code-learning-15","date":"2021-01-30T12:21:31.000Z","updated":"2021-01-30T13:54:11.227Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-sofa-plugin-分析\"><a href=\"#SOUL-sofa-plugin-分析\" class=\"headerlink\" title=\"SOUL sofa plugin 分析\"></a>SOUL sofa plugin 分析</h3><p>soul-plugin/soul-plugin-global/src/main/java/org/dromara/soul/plugin/global/GlobalPlugin.java  中使用了builder构建soulContext</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\npublic Mono&lt;Void&gt; execute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n    <span class=\"hljs-keyword\">final</span> ServerHttpRequest request = exchange.getRequest();\n    <span class=\"hljs-keyword\">final</span> HttpHeaders headers = request.getHeaders();\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> upgrade = headers.getFirst(<span class=\"hljs-string\">\"Upgrade\"</span>);\n    SoulContext soulContext;\n    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(upgrade) || !<span class=\"hljs-string\">\"websocket\"</span>.equals(upgrade)) {\n        soulContext = builder.build(exchange);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">final</span> MultiValueMap&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; queryParams = request.getQueryParams();\n        soulContext = transformMap(queryParams);\n    }\n    exchange.getAttributes().put(Constants.CONTEXT, soulContext);\n    <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n}\n</code></pre>\n<p>soul-plugin/soul-plugin-global/src/main/java/org/dromara/soul/plugin/global/DefaultSoulContextBuilder.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">SoulContext <span class=\"hljs-title\">build</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange)</span> </span>{\n    <span class=\"hljs-keyword\">final</span> ServerHttpRequest request = exchange.getRequest();\n    String path = request.getURI().getPath();\n  <span class=\"hljs-comment\">//根据url拿到缓存的Metadata,供后面的插件使用</span>\n    MetaData metaData = MetaDataCache.getInstance().obtain(path);\n    <span class=\"hljs-keyword\">if</span> (Objects.nonNull(metaData) &amp;&amp; metaData.getEnabled()) {\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-title\">transform</span><span class=\"hljs-params\">(request, metaData)</span></span>;\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/param/BodyParamPlugin.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; execute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n        <span class=\"hljs-keyword\">final</span> ServerHttpRequest request = exchange.getRequest();\n        <span class=\"hljs-keyword\">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        <span class=\"hljs-keyword\">if</span> (Objects.nonNull(soulContext) &amp;&amp; RpcTypeEnum.SOFA.getName().equals(soulContext.getRpcType())) {\n            MediaType mediaType = request.getHeaders().getContentType();\n            ServerRequest serverRequest = ServerRequest.create(exchange, messageReaders);\n          <span class=\"hljs-comment\">//根据不同的请求类型做不同处理</span>\n            <span class=\"hljs-keyword\">if</span> (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType)) {\n                <span class=\"hljs-keyword\">return</span> body(exchange, serverRequest, chain);\n            }\n            <span class=\"hljs-keyword\">if</span> (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) {\n                <span class=\"hljs-keyword\">return</span> formData(exchange, serverRequest, chain);\n            }\n            <span class=\"hljs-keyword\">return</span> query(exchange, serverRequest, chain);\n        }\n        <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n    }\n\n<span class=\"hljs-comment\">//可以看到oder小于SOFA plugin, 这样就能保证在sofa plugin之前执行</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> int getOrder() {\n        <span class=\"hljs-keyword\">return</span> PluginEnum.SOFA.getCode() - <span class=\"hljs-number\">1</span>;\n    }\n<span class=\"hljs-keyword\">private</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; formData(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> ServerRequest serverRequest, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n<span class=\"hljs-comment\">//sofa plugin前置处理, 需要的参数放进exchange上下文中</span>\n        <span class=\"hljs-keyword\">return</span> serverRequest.formData()\n                .switchIfEmpty(Mono.defer(() -&gt; Mono.just(new LinkedMultiValueMap&lt;&gt;())))\n                .flatMap(map -&gt; {\n                    exchange.getAttributes().put(Constants.SOFA_PARAMS, HttpParamConverter.toMap(() -&gt; map));\n                    <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n                });\n    }\n<span class=\"hljs-comment\">//sofa plugin前置处理, 需要的参数放进exchange上下文中</span>\n    <span class=\"hljs-keyword\">private</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; query(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> ServerRequest serverRequest, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n        exchange.getAttributes().put(Constants.SOFA_PARAMS,\n                HttpParamConverter.ofString(() -&gt; serverRequest.uri().getQuery()));\n        <span class=\"hljs-keyword\">return</span> chain.execute(exchange);\n    }\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/SofaPlugin.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; doExecute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> SelectorData selector, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n    String body = exchange.getAttribute(Constants.SOFA_PARAMS);\n    SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n    <span class=\"hljs-keyword\">assert</span> soulContext != <span class=\"hljs-keyword\">null</span>;\n    MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n    <span class=\"hljs-keyword\">if</span> (!checkMetaData(metaData)) {\n        <span class=\"hljs-keyword\">assert</span> metaData != <span class=\"hljs-keyword\">null</span>;\n        log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\" path is :{}, meta data have error.... {}\"</span>, soulContext.getPath(), metaData.toString());\n        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), <span class=\"hljs-keyword\">null</span>);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (StringUtils.isNoneBlank(metaData.getParameterTypes()) &amp;&amp; StringUtils.isBlank(body)) {\n        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.SOFA_HAVE_BODY_PARAM.getCode(), SoulResultEnum.SOFA_HAVE_BODY_PARAM.getMsg(), <span class=\"hljs-keyword\">null</span>);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n    }\n  <span class=\"hljs-comment\">//进行sofa泛化调用</span>\n    <span class=\"hljs-keyword\">final</span> Mono&lt;Object&gt; result = sofaProxyService.genericInvoker(body, metaData, exchange);\n    <span class=\"hljs-keyword\">return</span> result.then(chain.execute(exchange));\n}\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyService.java </p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-keyword\">Object</span>&gt; genericInvoker(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> body, <span class=\"hljs-keyword\">final</span> MetaData metaData, <span class=\"hljs-keyword\">final</span> ServerWebExchange exchange) <span class=\"hljs-keyword\">throws</span> SoulException {\n    ConsumerConfig&lt;GenericService&gt; reference = ApplicationConfigCache.getInstance().<span class=\"hljs-built_in\">get</span>(metaData.getPath());\n    <span class=\"hljs-keyword\">if</span> (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n        ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n        reference = ApplicationConfigCache.getInstance().initRef(metaData);\n    }\n    GenericService genericService = reference.refer();\n    Pair&lt;<span class=\"hljs-keyword\">String</span>[], <span class=\"hljs-keyword\">Object</span>[]&gt; pair;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == body || <span class=\"hljs-string\">\"\"</span>.equals(body) || <span class=\"hljs-string\">\"{}\"</span>.equals(body) || <span class=\"hljs-string\">\"null\"</span>.equals(body)) {\n        pair = <span class=\"hljs-keyword\">new</span> ImmutablePair&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>[]{}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Object</span>[]{});\n    } <span class=\"hljs-keyword\">else</span> {\n        pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n    }\n    CompletableFuture&lt;<span class=\"hljs-keyword\">Object</span>&gt; future = <span class=\"hljs-keyword\">new</span> CompletableFuture&lt;&gt;();\n    RpcInvokeContext.getContext().setResponseCallback(<span class=\"hljs-keyword\">new</span> SofaResponseCallback&lt;<span class=\"hljs-keyword\">Object</span>&gt;() {\n        @Override\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> onAppResponse(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">Object</span> o, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> s, <span class=\"hljs-keyword\">final</span> RequestBase requestBase) {\n            future.complete(o);\n        }\n\n        @Override\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> onAppException(<span class=\"hljs-keyword\">final</span> Throwable throwable, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> s, <span class=\"hljs-keyword\">final</span> RequestBase requestBase) {\n            future.completeExceptionally(throwable);\n        }\n\n        @Override\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> onSofaException(<span class=\"hljs-keyword\">final</span> SofaRpcException e, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> s, <span class=\"hljs-keyword\">final</span> RequestBase requestBase) {\n            future.completeExceptionally(e);\n        }\n    });\n    genericService.$genericInvoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n    <span class=\"hljs-keyword\">return</span> Mono.fromFuture(future.thenApply(ret -&gt; {\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(ret)) {\n            ret = Constants.SOFA_RPC_RESULT_EMPTY;\n        }\n<span class=\"hljs-comment\">//讲结果放入exchange如, 供后面的SofaResponsePlugin.java 处理</span>\n        GenericObject genericObject = (GenericObject) ret;\n        exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, genericObject.getFields());\n        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n        <span class=\"hljs-keyword\">return</span> ret;\n    })).onErrorMap(SoulException::<span class=\"hljs-keyword\">new</span>);\n}\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/response/SofaResponsePlugin.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; execute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n    <span class=\"hljs-keyword\">return</span> chain.execute(exchange).then(Mono.defer(() -&gt; {\n      <span class=\"hljs-comment\">//根据不同结果返回请求调用结果</span>\n        <span class=\"hljs-keyword\">final</span> Object result = exchange.getAttribute(Constants.SOFA_RPC_RESULT);\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(result)) {\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n        Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, success)</span></span>;\n    }));\n}\n</code></pre>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}