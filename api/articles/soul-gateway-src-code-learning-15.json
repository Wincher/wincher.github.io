{"title":"soul_gateway_src_code_learning_15","slug":"soul-gateway-src-code-learning-15","date":"2021-01-30T12:21:31.000Z","updated":"2021-01-30T13:54:11.227Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-sofa-plugin-分析\"><a href=\"#SOUL-sofa-plugin-分析\" class=\"headerlink\" title=\"SOUL sofa plugin 分析\"></a>SOUL sofa plugin 分析</h3><p>soul-plugin/soul-plugin-global/src/main/java/org/dromara/soul/plugin/global/GlobalPlugin.java  中使用了builder构建soulContext</p>\n<pre><code class=\"java\">@Override\npublic Mono&lt;Void&gt; execute(final ServerWebExchange exchange, final SoulPluginChain chain) {\n    final ServerHttpRequest request = exchange.getRequest();\n    final HttpHeaders headers = request.getHeaders();\n    final String upgrade = headers.getFirst(&quot;Upgrade&quot;);\n    SoulContext soulContext;\n    if (StringUtils.isBlank(upgrade) || !&quot;websocket&quot;.equals(upgrade)) {\n        soulContext = builder.build(exchange);\n    } else {\n        final MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();\n        soulContext = transformMap(queryParams);\n    }\n    exchange.getAttributes().put(Constants.CONTEXT, soulContext);\n    return chain.execute(exchange);\n}\n</code></pre>\n<p>soul-plugin/soul-plugin-global/src/main/java/org/dromara/soul/plugin/global/DefaultSoulContextBuilder.java</p>\n<pre><code class=\"java\">@Override\npublic SoulContext build(final ServerWebExchange exchange) {\n    final ServerHttpRequest request = exchange.getRequest();\n    String path = request.getURI().getPath();\n  //根据url拿到缓存的Metadata,供后面的插件使用\n    MetaData metaData = MetaDataCache.getInstance().obtain(path);\n    if (Objects.nonNull(metaData) &amp;&amp; metaData.getEnabled()) {\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n    }\n    return transform(request, metaData);\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/param/BodyParamPlugin.java</p>\n<pre><code class=\"java\">@Override\n    public Mono&lt;Void&gt; execute(final ServerWebExchange exchange, final SoulPluginChain chain) {\n        final ServerHttpRequest request = exchange.getRequest();\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        if (Objects.nonNull(soulContext) &amp;&amp; RpcTypeEnum.SOFA.getName().equals(soulContext.getRpcType())) {\n            MediaType mediaType = request.getHeaders().getContentType();\n            ServerRequest serverRequest = ServerRequest.create(exchange, messageReaders);\n          //根据不同的请求类型做不同处理\n            if (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType)) {\n                return body(exchange, serverRequest, chain);\n            }\n            if (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) {\n                return formData(exchange, serverRequest, chain);\n            }\n            return query(exchange, serverRequest, chain);\n        }\n        return chain.execute(exchange);\n    }\n\n//可以看到oder小于SOFA plugin, 这样就能保证在sofa plugin之前执行\n    @Override\n    public int getOrder() {\n        return PluginEnum.SOFA.getCode() - 1;\n    }\nprivate Mono&lt;Void&gt; formData(final ServerWebExchange exchange, final ServerRequest serverRequest, final SoulPluginChain chain) {\n//sofa plugin前置处理, 需要的参数放进exchange上下文中\n        return serverRequest.formData()\n                .switchIfEmpty(Mono.defer(() -&gt; Mono.just(new LinkedMultiValueMap&lt;&gt;())))\n                .flatMap(map -&gt; {\n                    exchange.getAttributes().put(Constants.SOFA_PARAMS, HttpParamConverter.toMap(() -&gt; map));\n                    return chain.execute(exchange);\n                });\n    }\n//sofa plugin前置处理, 需要的参数放进exchange上下文中\n    private Mono&lt;Void&gt; query(final ServerWebExchange exchange, final ServerRequest serverRequest, final SoulPluginChain chain) {\n        exchange.getAttributes().put(Constants.SOFA_PARAMS,\n                HttpParamConverter.ofString(() -&gt; serverRequest.uri().getQuery()));\n        return chain.execute(exchange);\n    }\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/SofaPlugin.java</p>\n<pre><code class=\"java\">@Override\nprotected Mono&lt;Void&gt; doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n    String body = exchange.getAttribute(Constants.SOFA_PARAMS);\n    SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n    assert soulContext != null;\n    MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n    if (!checkMetaData(metaData)) {\n        assert metaData != null;\n        log.error(&quot; path is :{}, meta data have error.... {}&quot;, soulContext.getPath(), metaData.toString());\n        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n        return WebFluxResultUtils.result(exchange, error);\n    }\n    if (StringUtils.isNoneBlank(metaData.getParameterTypes()) &amp;&amp; StringUtils.isBlank(body)) {\n        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        Object error = SoulResultWrap.error(SoulResultEnum.SOFA_HAVE_BODY_PARAM.getCode(), SoulResultEnum.SOFA_HAVE_BODY_PARAM.getMsg(), null);\n        return WebFluxResultUtils.result(exchange, error);\n    }\n  //进行sofa泛化调用\n    final Mono&lt;Object&gt; result = sofaProxyService.genericInvoker(body, metaData, exchange);\n    return result.then(chain.execute(exchange));\n}\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyService.java </p>\n<pre><code class=\"java\">public Mono&lt;Object&gt; genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {\n    ConsumerConfig&lt;GenericService&gt; reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n    if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n        ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n        reference = ApplicationConfigCache.getInstance().initRef(metaData);\n    }\n    GenericService genericService = reference.refer();\n    Pair&lt;String[], Object[]&gt; pair;\n    if (null == body || &quot;&quot;.equals(body) || &quot;{}&quot;.equals(body) || &quot;null&quot;.equals(body)) {\n        pair = new ImmutablePair&lt;&gt;(new String[]{}, new Object[]{});\n    } else {\n        pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n    }\n    CompletableFuture&lt;Object&gt; future = new CompletableFuture&lt;&gt;();\n    RpcInvokeContext.getContext().setResponseCallback(new SofaResponseCallback&lt;Object&gt;() {\n        @Override\n        public void onAppResponse(final Object o, final String s, final RequestBase requestBase) {\n            future.complete(o);\n        }\n\n        @Override\n        public void onAppException(final Throwable throwable, final String s, final RequestBase requestBase) {\n            future.completeExceptionally(throwable);\n        }\n\n        @Override\n        public void onSofaException(final SofaRpcException e, final String s, final RequestBase requestBase) {\n            future.completeExceptionally(e);\n        }\n    });\n    genericService.$genericInvoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n    return Mono.fromFuture(future.thenApply(ret -&gt; {\n        if (Objects.isNull(ret)) {\n            ret = Constants.SOFA_RPC_RESULT_EMPTY;\n        }\n//讲结果放入exchange如, 供后面的SofaResponsePlugin.java 处理\n        GenericObject genericObject = (GenericObject) ret;\n        exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, genericObject.getFields());\n        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n        return ret;\n    })).onErrorMap(SoulException::new);\n}\n</code></pre>\n<p>soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/response/SofaResponsePlugin.java</p>\n<pre><code class=\"java\">@Override\npublic Mono&lt;Void&gt; execute(final ServerWebExchange exchange, final SoulPluginChain chain) {\n    return chain.execute(exchange).then(Mono.defer(() -&gt; {\n      //根据不同结果返回请求调用结果\n        final Object result = exchange.getAttribute(Constants.SOFA_RPC_RESULT);\n        if (Objects.isNull(result)) {\n            Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));\n        return WebFluxResultUtils.result(exchange, success);\n    }));\n}\n</code></pre>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}