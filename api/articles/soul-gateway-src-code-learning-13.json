{"title":"soul_gateway_src_code_learning_13","slug":"soul-gateway-src-code-learning-13","date":"2021-01-28T14:23:58.000Z","updated":"2021-01-28T15:47:29.931Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-SpringCloud-plugin-amp-WebClient-plugin\"><a href=\"#SOUL-SpringCloud-plugin-amp-WebClient-plugin\" class=\"headerlink\" title=\"SOUL: SpringCloud plugin &amp; WebClient plugin\"></a>SOUL: SpringCloud plugin &amp; WebClient plugin</h3><p>接上一章, 直接看 SpringCloud Plugin的处理逻辑</p>\n<p>加在SpringCloudplugin需要在soul-bootstrap/pom.xml加入</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!--soul springCloud plugin start--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-springcloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{last.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-httpclient<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{last.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n   <span class=\"hljs-comment\">&lt;!--soul springCloud plugin end--&gt;</span>\n\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-commons<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n   <span class=\"hljs-comment\">&lt;!--使用 eureka 作为 springCloud的注册中心时 --&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>  \n\n   <span class=\"hljs-comment\">&lt;!--使用 nacos 作为 springCloud的注册中心 --&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</span></code></pre>\n<p>同样在  soul-bootstrap/src/main/resources/application-local.yml 中</p>\n\n    <pre><code class=\"lang-yaml\"> <span class=\"hljs-comment\"># 使用 eureka</span>\n<span class=\"hljs-attr\">  eureka:</span>\n<span class=\"hljs-attr\">     client:</span>\n<span class=\"hljs-attr\">       serviceUrl:</span>\n<span class=\"hljs-attr\">         defaultZone:</span> <span class=\"hljs-attr\">http://localhost:8761/eureka/</span>\n<span class=\"hljs-attr\">     instance:</span>\n<span class=\"hljs-attr\">       prefer-ip-address:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 使用 nacos   </span>\n<span class=\"hljs-attr\">  spring:</span>\n<span class=\"hljs-attr\">     cloud:</span>\n<span class=\"hljs-attr\">       nacos:</span>\n<span class=\"hljs-attr\">         discovery:</span>\n<span class=\"hljs-attr\">            server-addr:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n</code></pre>\n<p>看一下SpringCloud plugin的核心逻辑</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n <span class=\"hljs-comment\">//同样是处理ServerWebExchange</span>\n    <span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; doExecute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> SelectorData selector, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(rule)) {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> Mono.<span class=\"hljs-title\">empty</span><span class=\"hljs-params\">()</span></span>;\n        }\n        <span class=\"hljs-keyword\">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        <span class=\"hljs-keyword\">assert</span> soulContext != <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-comment\">//获取具体的SpringCLoudHandler</span>\n        <span class=\"hljs-keyword\">final</span> SpringCloudRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SpringCloudRuleHandle.class);\n        <span class=\"hljs-keyword\">final</span> SpringCloudSelectorHandle selectorHandle = GsonUtils.getInstance().fromJson(selector.getHandle(), SpringCloudSelectorHandle.class);\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(selectorHandle.getServiceId()) || StringUtils.isBlank(ruleHandle.getPath())) {\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getCode(), SoulResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n<span class=\"hljs-comment\">//通过LoadBalancerClient获取具体的ILoadBalancer实例</span>\n        <span class=\"hljs-keyword\">final</span> ServiceInstance serviceInstance = loadBalancer.choose(selectorHandle.getServiceId());\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(serviceInstance)) {\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getCode(), SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n        <span class=\"hljs-keyword\">final</span> URI uri = loadBalancer.reconstructURI(serviceInstance, URI.create(soulContext.getRealUrl()));\n<span class=\"hljs-comment\">//拼装出真实目标地址url</span>\n        String realURL = buildRealURL(uri.toASCIIString(), soulContext.getHttpMethod(), exchange.getRequest().getURI().getQuery());\n<span class=\"hljs-comment\">// set 真实地址到 exchange中</span>\n        exchange.getAttributes().put(Constants.HTTP_URL, realURL);\n        <span class=\"hljs-comment\">//set time out.</span>\n        exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout());\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> chain.<span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(exchange)</span></span>;\n    }\n</code></pre>\n<p>而后 WebClientPlugin会使用刚SpringCloud plugin 处理过后 并set 到SoulContext的真实地址去访问后台服务</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; execute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n      <span class=\"hljs-keyword\">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n      <span class=\"hljs-keyword\">assert</span> soulContext != <span class=\"hljs-keyword\">null</span>;\n      String urlPath = exchange.getAttribute(Constants.HTTP_URL);\n      <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(urlPath)) {\n          Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), <span class=\"hljs-keyword\">null</span>);\n          <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n      }\n      <span class=\"hljs-keyword\">long</span> timeout = (<span class=\"hljs-keyword\">long</span>) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(<span class=\"hljs-number\">3000</span>L);\n      <span class=\"hljs-keyword\">int</span> retryTimes = (<span class=\"hljs-keyword\">int</span>) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(<span class=\"hljs-number\">0</span>);\n      log.info(<span class=\"hljs-string\">\"The request urlPath is {}, retryTimes is {}\"</span>, urlPath, retryTimes);\n      HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue());\n      <span class=\"hljs-comment\">//WebClient是从Spring WebFlux 5.0版本开始提供基于响应式编程模型的非阻塞的HttpClient</span>\n      <span class=\"hljs-comment\">//拼装请求</span>\n      WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath);\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-title\">handleRequestBody</span><span class=\"hljs-params\">(requestBodySpec, exchange, timeout, retryTimes, chain)</span></span>;\n  }\n<span class=\"hljs-keyword\">private</span> Mono&lt;Void&gt; handleRequestBody(<span class=\"hljs-keyword\">final</span> WebClient.RequestBodySpec requestBodySpec,\n                                       <span class=\"hljs-keyword\">final</span> ServerWebExchange exchange,\n                                       <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> timeout,\n                                       <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> retryTimes,\n                                       <span class=\"hljs-keyword\">final</span> SoulPluginChain chain) {\n      <span class=\"hljs-keyword\">return</span> requestBodySpec.headers(httpHeaders -&gt; {\n          httpHeaders.addAll(exchange.getRequest().getHeaders());\n          httpHeaders.remove(HttpHeaders.HOST);\n      })\n              .contentType(buildMediaType(exchange))\n              .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody()))\n              .exchange()\n              .doOnError(e -&gt; log.<span class=\"hljs-keyword\">error</span>(e.getMessage()))\n              .timeout(Duration.ofMillis(timeout))\n              .retryWhen(Retry.onlyIf(x -&gt; x.exception() <span class=\"hljs-keyword\">instanceof</span> ConnectTimeoutException)\n                  .retryMax(retryTimes)\n                  .backoff(Backoff.exponential(Duration.ofMillis(<span class=\"hljs-number\">200</span>), Duration.ofSeconds(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">true</span>)))\n              .flatMap(e -&gt; doNext(e, exchange, chain));\n</code></pre>\n<p>至此, 请求被代理到了真实访问的服务.</p>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}