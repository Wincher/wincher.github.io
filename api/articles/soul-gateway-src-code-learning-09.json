{"title":"soul_gateway_src_code_learning_09","slug":"soul-gateway-src-code-learning-09","date":"2021-01-23T15:44:35.000Z","updated":"2021-01-24T17:24:24.077Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-Admin-amp-网关-nacos-数据同步\"><a href=\"#SOUL-Admin-amp-网关-nacos-数据同步\" class=\"headerlink\" title=\"SOUL Admin &amp; 网关 nacos 数据同步\"></a>SOUL Admin &amp; 网关 nacos 数据同步</h3><p>首先准备好nacos server, 这里不详细叙述</p>\n\n    <pre><code class=\"lang-bash\">sh startup.sh -m standalone\n<span class=\"hljs-keyword\">.</span>......省略\nnacos is starting with standalone\nnacos is starting，you can<span class=\"hljs-built_in\"> check </span>the /Users/wincher/Documents/learning/service/nacos/logs/start.out\n</code></pre>\n<p><a href=\"http://127.0.0.1:8848/nacos/index.html\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8848/nacos/index.html</a>, 默认账号:密码都是nacos</p>\n<p><img src=\"/2021/01/23/soul-gateway-src-code-learning-09/00nacos_config.png\" alt=\"img\"></p>\n<p>可以看到启动了, 配置项目前也都是空的</p>\n<p>记下来配置soul</p>\n<p>类似之前的数据同步, admin和bootstrap项目的配置文件分别打开nacos的注释</p>\n\n    <pre><code class=\"lang-yaml\">soul:\n    sync:\n        nacos:\n      url: localhost:<span class=\"hljs-number\">8848</span>\n      namespace: 1c10d748-af86-<span class=\"hljs-number\">43b9</span>-<span class=\"hljs-number\">8265</span>-75f487d20c6c\n</code></pre>\n<p>soul-admin/pom.xml 已经添加了nacos-client</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{nacos-client.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</span></code></pre>\n<p>soul-bootstrap/pom.xml 打开nacos的注释</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>根据log查看HttpSyncDataService逻辑, 同样实现了SyncDataService接口</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">NacosSyncDataService</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ConfigService configService, <span class=\"hljs-keyword\">final</span> PluginDataSubscriber     pluginDataSubscriber,\n                                <span class=\"hljs-keyword\">final</span> List&lt;MetaDataSubscriber&gt; metaDataSubscribers, <span class=\"hljs-keyword\">final</span> List&lt;AuthDataSubscriber&gt; authDataSubscribers)</span> </span>{\n\n        <span class=\"hljs-keyword\">super</span>(configService, pluginDataSubscriber, metaDataSubscribers, authDataSubscribers);\n  <span class=\"hljs-comment\">//构造方法执行后就开始工作了</span>\n        start();\n    }\n\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">//顾名思义观察不同类型的数据变化</span>\n      <span class=\"hljs-comment\">//NacosSyncDataService 继承自 NacosCacheHandler.java, , updatePluginMap</span>\n        watcherData(PLUGIN_DATA_ID, <span class=\"hljs-keyword\">this</span>::updatePluginMap);\n        watcherData(SELECTOR_DATA_ID, <span class=\"hljs-keyword\">this</span>::updateSelectorMap);\n        watcherData(RULE_DATA_ID, <span class=\"hljs-keyword\">this</span>::updateRuleMap);\n        watcherData(META_DATA_ID, <span class=\"hljs-keyword\">this</span>::updateMetaDataMap);\n        watcherData(AUTH_DATA_ID, <span class=\"hljs-keyword\">this</span>::updateAuthMap);\n    }\n\n<span class=\"hljs-comment\">//举一个 PLUGIN 的例子看看, 其他的也类似, oc是传进来的onchange时间</span>\n<span class=\"hljs-comment\">//OnChange是定义在 NacosCacheHandler的内部函数式接口, 所以可以接收一个方法作为参数, 如上面的 this::updatePluginMap</span>\n <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">watcherData</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String dataId, <span class=\"hljs-keyword\">final</span> OnChange oc)</span> </span>{\n        Listener listener = <span class=\"hljs-keyword\">new</span> Listener() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">receiveConfigInfo</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String configInfo)</span> </span>{\n                oc.change(configInfo);\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">Executor <span class=\"hljs-title\">getExecutor</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n            }\n        };\n        oc.change(getConfigAndSignListener(dataId, listener));\n        LISTENERS.getOrDefault(dataId, <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;()).add(listener);\n    }\n\n\n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updatePluginMap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String configInfo)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            List&lt;PluginData&gt; pluginDataList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(GsonUtils.getInstance().toObjectMap(configInfo, PluginData.class).values());\n          <span class=\"hljs-comment\">// 同步更新的配置到本地, 之后会分析pluginDataSubscriber运行的机制, 以及配置是如何缓存在本地的</span>\n            pluginDataList.forEach(pluginData -&gt; Optional.ofNullable(pluginDataSubscriber).ifPresent(subscriber -&gt; {\n                subscriber.unSubscribe(pluginData);\n                subscriber.onSubscribe(pluginData);\n            }));\n        } <span class=\"hljs-keyword\">catch</span> (JsonParseException e) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"sync plugin data have error:\"</span>, e);\n        }\n    }\n</code></pre>\n<p>admin中实现了一组DataChangedListener, 其中NacosDataChangedListener就是帮助admin同步配置到nacos的</p>\n\n    <pre><code class=\"lang-java\">@Override\npublic void onPluginChanged(final <span class=\"hljs-keyword\">List</span>&lt;PluginData&gt; changed, final DataEventTypeEnum eventType) {\n    updatePluginMap(getConfig(PLUGIN_DATA_ID));\n    switch (eventType) {\n        case DELETE:\n            changed.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">plugin</span> -&gt; PLUGIN_MAP.remove(<span class=\"hljs-keyword\">plugin</span>.getName()));\n            <span class=\"hljs-keyword\">break</span>;\n        case REFRESH:\n        case MYSELF:\n            <span class=\"hljs-keyword\">Set</span>&lt;String&gt; <span class=\"hljs-keyword\">set</span> = new HashSet&lt;&gt;(PLUGIN_MAP.keySet());\n            changed.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">plugin</span> -&gt; {\n                <span class=\"hljs-keyword\">set</span>.remove(<span class=\"hljs-keyword\">plugin</span>.getName());\n                PLUGIN_MAP.put(<span class=\"hljs-keyword\">plugin</span>.getName(), <span class=\"hljs-keyword\">plugin</span>);\n            });\n            PLUGIN_MAP.keySet().removeAll(<span class=\"hljs-keyword\">set</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        default:\n            changed.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">plugin</span> -&gt; PLUGIN_MAP.put(<span class=\"hljs-keyword\">plugin</span>.getName(), <span class=\"hljs-keyword\">plugin</span>));\n            <span class=\"hljs-keyword\">break</span>;\n    }\n    publishConfig(PLUGIN_DATA_ID, PLUGIN_MAP);\n}\n</code></pre>\n<p>TODO: nacos start failed</p>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}