{"title":"soul_gateway_src_code_learning_06","slug":"soul-gateway-src-code-learning-06","date":"2021-01-20T15:57:43.000Z","updated":"2021-01-20T16:59:42.480Z","comments":true,"excerpt":"","content":"<h2 id=\"SOUL-Admin-amp-网关-Websocket-数据同步\"><a href=\"#SOUL-Admin-amp-网关-Websocket-数据同步\" class=\"headerlink\" title=\"SOUL Admin &amp; 网关 Websocket 数据同步\"></a>SOUL Admin &amp; 网关 Websocket 数据同步</h2><p>启动后 admin 和 bootstrap 后, admin log中可以看到</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-number\">2021</span><span class=\"hljs-bullet\">-01</span><span class=\"hljs-bullet\">-21</span> <span class=\"hljs-number\">00</span><span class=\"hljs-string\">:09:46.004</span>  <span class=\"hljs-string\">INFO</span> <span class=\"hljs-number\">11893</span> <span class=\"hljs-meta\">---</span> <span class=\"hljs-string\">[0.0-9095-exec-8]</span> <span class=\"hljs-string\">o.d.s.a.l.websocket.WebsocketCollector</span>   <span class=\"hljs-string\">:</span> <span class=\"hljs-string\">websocket</span> <span class=\"hljs-string\">on</span> <span class=\"hljs-string\">open</span> <span class=\"hljs-string\">successful....</span>\n</code></pre>\n<p>根据log找到 soul-admin/src/main/java/org/dromara/soul/admin/listener/websocket/WebsocketCollector.java ,</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@ServerEndpoint(<span class=\"hljs-meta-string\">\"/websocket\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebsocketCollector</span> </span>{\n......\n</code></pre>\n<p>可见admin是一个server端, 那么调用方就在bootstrap中了, bootstrap中有这样一条log</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-number\">2021</span><span class=\"hljs-bullet\">-01</span><span class=\"hljs-bullet\">-20</span> <span class=\"hljs-number\">23</span><span class=\"hljs-string\">:16:02.285</span>  <span class=\"hljs-string\">INFO</span> <span class=\"hljs-number\">21427</span> <span class=\"hljs-meta\">---</span> <span class=\"hljs-string\">[</span>           <span class=\"hljs-string\">main]</span> <span class=\"hljs-string\">b.s.s.d.w.WebsocketSyncDataConfiguration</span> <span class=\"hljs-string\">:</span> <span class=\"hljs-string\">you</span> <span class=\"hljs-string\">use</span> <span class=\"hljs-string\">websocket</span> <span class=\"hljs-string\">sync</span> <span class=\"hljs-string\">soul</span> <span class=\"hljs-string\">data.......</span>\n</code></pre>\n<p>找到 soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-websocket/src/main/java/org/dromara/soul/spring/boot/starter/sync/data/websocket/WebsocketSyncDataConfiguration.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> SyncDataService websocketSyncDataService(<span class=\"hljs-keyword\">final</span> ObjectProvider&lt;WebsocketConfig&gt; websocketConfig, <span class=\"hljs-keyword\">final</span> ObjectProvider&lt;PluginDataSubscriber&gt; pluginSubscriber,\n                                           <span class=\"hljs-keyword\">final</span> ObjectProvider&lt;List&lt;MetaDataSubscriber&gt;&gt; metaSubscribers, <span class=\"hljs-keyword\">final</span> ObjectProvider&lt;List&lt;AuthDataSubscriber&gt;&gt; authSubscribers) {\n        log.info(<span class=\"hljs-string\">\"you use websocket sync soul data.......\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> WebsocketSyncDataService(websocketConfig.getIfAvailable(<span class=\"hljs-string\">WebsocketConfig:</span>:<span class=\"hljs-keyword\">new</span>), pluginSubscriber.getIfAvailable(),\n                metaSubscribers.getIfAvailable(<span class=\"hljs-string\">Collections:</span>:emptyList), authSubscribers.getIfAvailable(<span class=\"hljs-string\">Collections:</span>:emptyList));\n    }\n</code></pre>\n<p>  其中 websocketCondfig 来自</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-variable\">@Bean</span>\n    <span class=\"hljs-variable\">@ConfigurationProperties</span>(prefix = <span class=\"hljs-string\">\"soul.sync.websocket\"</span>)\n    public WebsocketConfig websocketConfig() {\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">WebsocketConfig</span>();\n    }\n</code></pre>\n<p>properties 来自如下配置:</p>\n<p>soul-bootstrap/src/main/resources/application-local.yml </p>\n\n    <pre><code class=\"lang-yaml\"><span class=\"hljs-attribute\">soul </span>:\n    <span class=\"hljs-attribute\">sync</span>:\n        <span class=\"hljs-attribute\">websocket </span>:\n             <span class=\"hljs-attribute\">urls</span>: <span class=\"hljs-attribute\">ws</span>:<span class=\"hljs-comment\">//localhost:9095/websocket</span>\n</code></pre>\n<p>WebsocketSyncDataService 构造方法</p>\n\n    <pre><code class=\"lang-java\">    <span class=\"hljs-keyword\">public</span> WebsocketSyncDataService(<span class=\"hljs-keyword\">final</span> WebsocketConfig websocketConfig,\n                                    <span class=\"hljs-keyword\">final</span> PluginDataSubscriber pluginDataSubscriber,\n                                    <span class=\"hljs-keyword\">final</span> List&lt;MetaDataSubscriber&gt; metaDataSubscribers,\n                                    <span class=\"hljs-keyword\">final</span> List&lt;AuthDataSubscriber&gt; authDataSubscribers) {\n      <span class=\"hljs-comment\">//可配置多个admin地址</span>\n        <span class=\"hljs-keyword\">String</span>[] urls = StringUtils.<span class=\"hljs-built_in\">split</span>(websocketConfig.getUrls(), <span class=\"hljs-string\">\",\"</span>);\n      <span class=\"hljs-comment\">//构建线程池</span>\n        executor = <span class=\"hljs-keyword\">new</span> ScheduledThreadPoolExecutor(urls.length, SoulThreadFactory.create(<span class=\"hljs-string\">\"websocket-connect\"</span>, <span class=\"hljs-keyword\">true</span>));\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">String</span> url : urls) {\n            <span class=\"hljs-keyword\">try</span> {\n              <span class=\"hljs-comment\">//这个clients 是定义的 private final List&lt;WebSocketClient&gt; clients = new ArrayList&lt;&gt;();</span>\n              <span class=\"hljs-comment\">//下面会分析SoulWebSocketClient</span>\n                clients.<span class=\"hljs-built_in\">add</span>(<span class=\"hljs-keyword\">new</span> SoulWebsocketClient(<span class=\"hljs-keyword\">new</span> URI(url), Objects.requireNonNull(pluginDataSubscriber), metaDataSubscribers, authDataSubscribers));\n            } <span class=\"hljs-keyword\">catch</span> (URISyntaxException e) {\n                <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"websocket url({}) is error\"</span>, url, e);\n            }\n        }\n        <span class=\"hljs-keyword\">try</span> {\n          <span class=\"hljs-comment\">//初始化对所有的WebSocketClient建立连接</span>\n            <span class=\"hljs-keyword\">for</span> (WebSocketClient client : clients) {\n                <span class=\"hljs-built_in\">boolean</span> success = client.connectBlocking(<span class=\"hljs-number\">3000</span>, TimeUnit.MILLISECONDS);\n                <span class=\"hljs-keyword\">if</span> (success) {\n                    <span class=\"hljs-built_in\">log</span>.info(<span class=\"hljs-string\">\"websocket connection is successful.....\"</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"websocket connection is error.....\"</span>);\n                }\n              <span class=\"hljs-comment\">//每30秒去重连断开连接的WebSocket连接</span>\n                executor.scheduleAtFixedRate(() -&gt; {\n                    <span class=\"hljs-keyword\">try</span> {\n                        <span class=\"hljs-keyword\">if</span> (client.isClosed()) {\n                            <span class=\"hljs-built_in\">boolean</span> reconnectSuccess = client.reconnectBlocking();\n                            <span class=\"hljs-keyword\">if</span> (reconnectSuccess) {\n                                <span class=\"hljs-built_in\">log</span>.info(<span class=\"hljs-string\">\"websocket reconnect is successful.....\"</span>);\n                            } <span class=\"hljs-keyword\">else</span> {\n                                <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"websocket reconnection is error.....\"</span>);\n                            }\n                        }\n                    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                        <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"websocket connect is error :{}\"</span>, e.getMessage());\n                    }\n                }, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, TimeUnit.SECONDS);\n            }\n            <span class=\"hljs-comment\">/* client.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxyaddress\", 80)));*/</span>\n        } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n            <span class=\"hljs-built_in\">log</span>.info(<span class=\"hljs-string\">\"websocket connection...exception....\"</span>, e);\n        }\n\n    }\n</code></pre>\n<p>这样和Admin之间的通信就建立了, 那接下来就是数据的同步了, 上面代码中 我们使用了自己封装的 SoulWebSocketClient</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-comment\">//这个标记了此client是否已经发送了握手请求到admin, 详情看下面onOpen方法</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">boolean</span> alreadySync = Boolean.FALSE;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SoulWebsocketClient</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> URI serverUri, <span class=\"hljs-keyword\">final</span> PluginDataSubscriber pluginDataSubscriber,\n                           <span class=\"hljs-keyword\">final</span> List&lt;MetaDataSubscriber&gt; metaDataSubscribers, <span class=\"hljs-keyword\">final</span> List&lt;AuthDataSubscriber&gt; authDataSubscribers)</span> </span>{\n    <span class=\"hljs-keyword\">super</span>(serverUri);\n  <span class=\"hljs-comment\">//初始化的时候我们传入了websocketDataHandler, 顾名思义是要处理通信的数据的</span>\n    <span class=\"hljs-keyword\">this</span>.websocketDataHandler = <span class=\"hljs-keyword\">new</span> WebsocketDataHandler(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers);\n}\n\n<span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onOpen</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> ServerHandshake serverHandshake)</span> </span>{\n      <span class=\"hljs-comment\">//client第一次onOpen, 建立连接后会发送DataEventTypeEnum.MYSELF.name()消息到admin, 这里有个印象, 后面会讲道它的用途</span>\n        <span class=\"hljs-keyword\">if</span> (!alreadySync) {\n            send(DataEventTypeEnum.MYSELF.name());\n            alreadySync = <span class=\"hljs-keyword\">true</span>;\n        }\n    }\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onMessage</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String result)</span> </span>{\n  handleResult(result);\n}\n\n\n<span class=\"hljs-meta\">@SuppressWarnings</span>(<span class=\"hljs-string\">\"ALL\"</span>)\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleResult</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String result)</span> </span>{\n  WebsocketData websocketData = GsonUtils.getInstance().fromJson(result, WebsocketData.class);\n  ConfigGroupEnum groupEnum = ConfigGroupEnum.acquireByName(websocketData.getGroupType());\n  String eventType = websocketData.getEventType();\n  String json = GsonUtils.getInstance().toJson(websocketData.getData());\n  <span class=\"hljs-comment\">//果不其然, onMessage使用了 websocketDataHandler 来处理数据</span>\n  websocketDataHandler.executor(groupEnum, json, eventType);\n}\n</code></pre>\n\n    <pre><code class=\"lang-java\">public WebsocketDataHandler(<span class=\"hljs-keyword\">final</span> PluginDataSubscriber pluginDataSubscriber,\n                            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">List</span>&lt;MetaDataSubscriber&gt; metaDataSubscribers,\n                            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">List</span>&lt;AuthDataSubscriber&gt; authDataSubscribers) {\n    ENUM_MAP.put(ConfigGroupEnum.PLUGIN, <span class=\"hljs-keyword\">new</span> PluginDataHandler(pluginDataSubscriber));\n    ENUM_MAP.put(ConfigGroupEnum.SELECTOR, <span class=\"hljs-keyword\">new</span> SelectorDataHandler(pluginDataSubscriber));\n    ENUM_MAP.put(ConfigGroupEnum.RULE, <span class=\"hljs-keyword\">new</span> RuleDataHandler(pluginDataSubscriber));\n    ENUM_MAP.put(ConfigGroupEnum.APP_AUTH, <span class=\"hljs-keyword\">new</span> AuthDataHandler(authDataSubscribers));\n    ENUM_MAP.put(ConfigGroupEnum.META_DATA, <span class=\"hljs-keyword\">new</span> MetaDataHandler(metaDataSubscribers));\n}\n\npublic <span class=\"hljs-keyword\">void</span> executor(<span class=\"hljs-keyword\">final</span> ConfigGroupEnum type, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> json, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> eventType) {\n  <span class=\"hljs-comment\">//WebsocketDataHandler初始化的时候定义了几种Config类型为key, 讲handler作为value存入map中</span>\n  <span class=\"hljs-comment\">//使用对应的handler处理json</span>\n        ENUM_MAP.<span class=\"hljs-keyword\">get</span>(type).handle(json, eventType);\n}\n</code></pre>\n<p>上面的DataHandler都继承自 soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/AbstractDataHandler.java,  会根据不同的eventType来对数据进行不同的操作</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> handle(<span class=\"hljs-keyword\">final</span> String json, <span class=\"hljs-keyword\">final</span> String eventType) {\n        List&lt;T&gt; dataList = convert(json);\n        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isNotEmpty(dataList)) {\n            DataEventTypeEnum eventTypeEnum = DataEventTypeEnum.acquireByName(eventType);\n            <span class=\"hljs-keyword\">switch</span> (eventTypeEnum) {\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">REFRESH:</span>\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">MYSELF:</span>\n                    doRefresh(dataList);\n                    <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">UPDATE:</span>\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">CREATE:</span>\n                    doUpdate(dataList);\n                    <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">DELETE:</span>\n                    doDelete(dataList);\n                    <span class=\"hljs-keyword\">break</span>;\n<span class=\"hljs-symbol\">                default:</span>\n                    <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n</code></pre>\n<p>然后回到最开始的 soul-admin/src/main/java/org/dromara/soul/admin/listener/websocket/WebsocketCollector.java </p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@OnMessage</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onMessage</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String message, <span class=\"hljs-keyword\">final</span> Session session)</span> </span>{\n      <span class=\"hljs-comment\">//admin如果收到DataEventTypeEnum.MYSELF.name(), 还记得上面bootstrap中每个client只有第一次onOpen才会发送的消息吗</span>\n        <span class=\"hljs-keyword\">if</span> (message.equals(DataEventTypeEnum.MYSELF.name())) {\n            <span class=\"hljs-keyword\">try</span> {\n                ThreadLocalUtil.put(SESSION_KEY, session);\n                SpringBeanUtils.getInstance().getBean(SyncDataService.class).syncAll(DataEventTypeEnum.MYSELF);\n            } <span class=\"hljs-keyword\">finally</span> {\n                ThreadLocalUtil.clear();\n            }\n        }\n    }\n</code></pre>\n<p>TODO:  这块MYSELF的含义具体分析下</p>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}