{"title":"soul_gateway_src_code_learning_12","slug":"soul-gateway-src-code-learning-12","date":"2021-01-27T16:56:35.000Z","updated":"2021-01-27T18:02:56.285Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-divide-plugin\"><a href=\"#SOUL-divide-plugin\" class=\"headerlink\" title=\"SOUL: divide plugin\"></a>SOUL: divide plugin</h3><p>通过上一节的分析, 我们知道了请求被plugin chain处理是通过 SoulWebHandler 中的静态类 DefaultSoulPluginChain 来处理的</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; execute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange) {\n            <span class=\"hljs-keyword\">return</span> Mono.defer(() -&gt; {\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.index &lt; plugins.size()) {\n                    SoulPlugin plugin = plugins.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">this</span>.index++);\n                    <span class=\"hljs-built_in\">Boolean</span> skip = plugin.skip(exchange);\n                    <span class=\"hljs-keyword\">if</span> (skip) {\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.execute(exchange);\n                    }\n                    <span class=\"hljs-keyword\">return</span> plugin.execute(exchange, <span class=\"hljs-keyword\">this</span>);\n                }\n                <span class=\"hljs-keyword\">return</span> Mono.empty();\n            });\n        }\n</code></pre>\n<p>soul-web/src/main/java/org/dromara/soul/web/configuration/SoulConfiguration.java 中注入plugin使用order做排序</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">final</span> List&lt;SoulPlugin&gt; soulPlugins = pluginList.stream()\n                .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).<span class=\"hljs-keyword\">collect</span>(Collectors.<span class=\"hljs-keyword\">toList</span>());\n</code></pre>\n<p>PluginEnum定义了插件的执行顺序,</p>\n\n    <pre><code class=\"lang-java\">public enum PluginEnum {\n    GLOBAL(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"global\"</span>),\n    SIGN(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"sign\"</span>),\n    WAF(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"waf\"</span>),\n    RATE_LIMITER(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"rate_limiter\"</span>),\n    CONTEXTPATH_MAPPING(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"context_path\"</span>),\n    REWRITE(<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"rewrite\"</span>),\n    REDIRECT(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"redirect\"</span>),\n    HYSTRIX(<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"hystrix\"</span>),\n    SENTINEL(<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"sentinel\"</span>),\n    RESILIENCE4J(<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"resilience4j\"</span>),\n    DIVIDE(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"divide\"</span>),\n    SPRING_CLOUD(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"springCloud\"</span>),\n    WEB_SOCKET(<span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"webSocket\"</span>),\n    DUBBO(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"dubbo\"</span>),\n    SOFA(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"sofa\"</span>),\n    TARS(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"tars\"</span>),\n    MONITOR(<span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"monitor\"</span>),\n    RESPONSE(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"response\"</span>);\n}\n</code></pre>\n<p>这一节来分析divide插件的处理逻辑</p>\n\n    <pre><code class=\"lang-java\">\n<span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; doExecute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> SelectorData selector, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n        <span class=\"hljs-keyword\">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        <span class=\"hljs-keyword\">assert</span> soulContext != <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">final</span> DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class);\n  <span class=\"hljs-comment\">//从缓存中拿到后端代理</span>\n        <span class=\"hljs-keyword\">final</span> List&lt;DivideUpstream&gt; upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId());\n        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(upstreamList)) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"divide upstream configuration error： {}\"</span>, rule.toString());\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n        <span class=\"hljs-keyword\">final</span> String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress();\n  <span class=\"hljs-comment\">//通过负载均衡算法拿到upstream</span>\n        DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip);\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(divideUpstream)) {\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\"divide has no upstream\"</span>);\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n        <span class=\"hljs-comment\">// set the http url</span>\n        String domain = buildDomain(divideUpstream);\n        String realURL = buildRealURL(domain, soulContext, exchange);\n  <span class=\"hljs-comment\">//对请求赋值真实访问的地址</span>\n        exchange.getAttributes().put(Constants.HTTP_URL, realURL);\n        <span class=\"hljs-comment\">// set the http timeout</span>\n        exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout());\n        exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry());\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> chain.<span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(exchange)</span></span>;\n    }\n</code></pre>\n<p>具体的负载均衡算法 实现了 LoadBalance 接口</p>\n<p><img src=\"/2021/01/28/soul-gateway-src-code-learning-12/00loadbalance_impls.png\" alt=\"img\"></p>\n<p>可以看到有三种实现, 分别是hash, random和roundrobin, 轮询算法, 通过SPI注入机制, soul自定义了加在spi的ExtensionLoader, 后面会单独分析</p>\n<p>另外网关遇到知道upstream的状态, 这里就涉及到了探活机制</p>\n<p>具体实现在 UpstreamCheckService</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-comment\">//此注解自动在Bean初始化后执行</span>\n<span class=\"hljs-meta\">@PostConstruct</span>\n    public <span class=\"hljs-keyword\">void</span> setup() {\n        PluginDO pluginDO = pluginMapper.selectByName(PluginEnum.DIVIDE.getName());\n      <span class=\"hljs-comment\">//初始化divide插件配置的所有upstream添加到UPSTREAM_MAP中</span>\n        <span class=\"hljs-keyword\">if</span> (pluginDO != <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-built_in\">List</span>&lt;SelectorDO&gt; selectorDOList = selectorMapper.findByPluginId(pluginDO.getId());\n            <span class=\"hljs-keyword\">for</span> (SelectorDO selectorDO : selectorDOList) {\n                <span class=\"hljs-built_in\">List</span>&lt;DivideUpstream&gt; divideUpstreams = GsonUtils.getInstance().fromList(selectorDO.getHandle(), DivideUpstream.<span class=\"hljs-keyword\">class</span>);\n                <span class=\"hljs-keyword\">if</span> (CollectionUtils.isNotEmpty(divideUpstreams)) {\n                    UPSTREAM_MAP.put(selectorDO.getName(), divideUpstreams);\n                }\n            }\n        }\n      <span class=\"hljs-comment\">//check属性使我们在application.yml中定义的soul.upstream.check值</span>\n        <span class=\"hljs-keyword\">if</span> (check) {\n            <span class=\"hljs-keyword\">new</span> ScheduledThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), SoulThreadFactory.create(<span class=\"hljs-string\">\"scheduled-upstream-task\"</span>, <span class=\"hljs-keyword\">false</span>))\n              <span class=\"hljs-comment\">//使用线程池对每一个upstream执行定时任务, 下面看下任务的具体逻辑</span>\n                    .scheduleWithFixedDelay(<span class=\"hljs-keyword\">this</span>::scheduled, <span class=\"hljs-number\">10</span>, scheduledTime, TimeUnit.SECONDS);\n        }\n    }\n</code></pre>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> scheduled() {\n        <span class=\"hljs-keyword\">if</span> (UPSTREAM_MAP.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">0</span>) {\n            UPSTREAM_MAP.forEach(<span class=\"hljs-keyword\">this</span>::check);\n        }\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> check(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> selectorName, <span class=\"hljs-keyword\">final</span> List&lt;DivideUpstream&gt; upstreamList) {\n        List&lt;DivideUpstream&gt; successList = Lists.newArrayListWithCapacity(upstreamList.<span class=\"hljs-built_in\">size</span>());\n        <span class=\"hljs-keyword\">for</span> (DivideUpstream divideUpstream : upstreamList) {\n          <span class=\"hljs-comment\">//方法中的核心逻辑使用Socket.connetct方法查看连接是否异常</span>\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">boolean</span> pass = UpstreamCheckUtils.checkUrl(divideUpstream.getUpstreamUrl());\n            <span class=\"hljs-keyword\">if</span> (pass) {\n\n  <span class=\"hljs-comment\">//对结果进行处理,更新upstream状态</span>\n                <span class=\"hljs-keyword\">if</span> (!divideUpstream.isStatus()) {\n                    divideUpstream.setTimestamp(System.currentTimeMillis());\n                    divideUpstream.setStatus(<span class=\"hljs-keyword\">true</span>);\n                    <span class=\"hljs-built_in\">log</span>.info(<span class=\"hljs-string\">\"UpstreamCacheManager check success the url: {}, host: {} \"</span>, divideUpstream.getUpstreamUrl(), divideUpstream.getUpstreamHost());\n                }\n                successList.<span class=\"hljs-built_in\">add</span>(divideUpstream);\n            } <span class=\"hljs-keyword\">else</span> {\n                divideUpstream.setStatus(<span class=\"hljs-keyword\">false</span>);\n                <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"check the url={} is fail \"</span>, divideUpstream.getUpstreamUrl());\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (successList.<span class=\"hljs-built_in\">size</span>() == upstreamList.<span class=\"hljs-built_in\">size</span>()) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (successList.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-comment\">//如果upstream并没有通过check, 更新新的成功连接的upstream list进入缓存</span>\n            UPSTREAM_MAP.put(selectorName, successList);\n            updateSelectorHandler(selectorName, successList);\n        } <span class=\"hljs-keyword\">else</span> {\n            UPSTREAM_MAP.remove(selectorName);\n            updateSelectorHandler(selectorName, <span class=\"hljs-keyword\">null</span>);\n        }\n    }\n\n<span class=\"hljs-comment\">//通知DataChanged</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateSelectorHandler(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> selectorName, <span class=\"hljs-keyword\">final</span> List&lt;DivideUpstream&gt; upstreams) {\n        SelectorDO selectorDO = selectorMapper.selectByName(selectorName);\n        <span class=\"hljs-keyword\">if</span> (Objects.nonNull(selectorDO)) {\n            List&lt;ConditionData&gt; conditionDataList = ConditionTransfer.INSTANCE.mapToSelectorDOS(\n                    selectorConditionMapper.selectByQuery(<span class=\"hljs-keyword\">new</span> SelectorConditionQuery(selectorDO.getId())));\n            PluginDO pluginDO = pluginMapper.selectById(selectorDO.getPluginId());\n            <span class=\"hljs-keyword\">String</span> handler = CollectionUtils.isEmpty(upstreams) ? <span class=\"hljs-string\">\"\"</span> : GsonUtils.getInstance().toJson(upstreams);\n            selectorDO.setHandle(handler);\n            selectorMapper.updateSelective(selectorDO);\n            <span class=\"hljs-keyword\">if</span> (Objects.nonNull(pluginDO)) {\n                SelectorData selectorData = SelectorDO.transFrom(selectorDO, pluginDO.getName(), conditionDataList);\n                selectorData.setHandle(handler);\n                <span class=\"hljs-comment\">// publish change event.</span>\n                eventPublisher.publishEvent(<span class=\"hljs-keyword\">new</span> DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE,\n                                                                 Collections.singletonList(selectorData)));\n            }\n        }\n    }\n</code></pre>\n<p>TODO;更细致的分析</p>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}