{"title":"soul_gateway_src_code_learning_04","slug":"soul-gateway-src-code-learning-04","date":"2021-01-18T16:38:50.000Z","updated":"2021-01-20T15:55:00.625Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-sofa-demo\"><a href=\"#SOUL-sofa-demo\" class=\"headerlink\" title=\"SOUL sofa demo\"></a>SOUL sofa demo</h3><p>和上一节的dubbo一样, 使用sofa插件, 访问 <a href=\"http://127.0.0.1:9095/#/system/plugin\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9095/#/system/plugin</a> 可以看到 sofa 插件默认是点击editor </p>\n<p>开启sofa plugin</p>\n<p>启动 zk,我用的docker <code>docker run -p 2181:2181 --restart unless-stopped --name zk -d zookeeper</code></p>\n<p>IDEA中运行 soul-examples/soul-examples-sofa/src/main/java/org/dromara/soul/examples/sofa/service/TestSofaApplication.java</p>\n<pre><code class=\"shell\">2021-01-19 00:48:51.530  INFO 77721 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : sofa client register success: {&quot;appName&quot;:&quot;sofa&quot;,&quot;contextPath&quot;:&quot;/sofa&quot;,&quot;path&quot;:&quot;/sofa/insert&quot;,&quot;pathDesc&quot;:&quot;Insert a row of data&quot;,&quot;rpcType&quot;:&quot;sofa&quot;,&quot;serviceName&quot;:&quot;org.dromara.soul.examples.dubbo.api.service.DubboTestService&quot;,&quot;methodName&quot;:&quot;insert&quot;,&quot;ruleName&quot;:&quot;/sofa/insert&quot;,&quot;parameterTypes&quot;:&quot;org.dromara.soul.examples.dubbo.api.entity.DubboTest&quot;,&quot;rpcExt&quot;:&quot;{\\&quot;loadbalance\\&quot;:\\&quot;hash\\&quot;,\\&quot;retries\\&quot;:3,\\&quot;timeout\\&quot;:-1}&quot;,&quot;enabled&quot;:true} \n2021-01-19 00:48:51.546  INFO 77721 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : sofa client register success: {&quot;appName&quot;:&quot;sofa&quot;,&quot;contextPath&quot;:&quot;/sofa&quot;,&quot;path&quot;:&quot;/sofa/findById&quot;,&quot;pathDesc&quot;:&quot;Find by Id&quot;,&quot;rpcType&quot;:&quot;sofa&quot;,&quot;serviceName&quot;:&quot;org.dromara.soul.examples.dubbo.api.service.DubboTestService&quot;,&quot;methodName&quot;:&quot;findById&quot;,&quot;ruleName&quot;:&quot;/sofa/findById&quot;,&quot;parameterTypes&quot;:&quot;java.lang.String&quot;,&quot;rpcExt&quot;:&quot;{\\&quot;loadbalance\\&quot;:\\&quot;hash\\&quot;,\\&quot;retries\\&quot;:3,\\&quot;timeout\\&quot;:-1}&quot;,&quot;enabled&quot;:true} \n2021-01-19 00:48:51.578  INFO 77721 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : sofa client register success: {&quot;appName&quot;:&quot;sofa&quot;,&quot;contextPath&quot;:&quot;/sofa&quot;,&quot;path&quot;:&quot;/sofa/findAll&quot;,&quot;pathDesc&quot;:&quot;Get all data&quot;,&quot;rpcType&quot;:&quot;sofa&quot;,&quot;serviceName&quot;:&quot;org.dromara.soul.examples.dubbo.api.service.DubboTestService&quot;,&quot;methodName&quot;:&quot;findAll&quot;,&quot;ruleName&quot;:&quot;/sofa/findAll&quot;,&quot;parameterTypes&quot;:&quot;&quot;,&quot;rpcExt&quot;:&quot;{\\&quot;loadbalance\\&quot;:\\&quot;hash\\&quot;,\\&quot;retries\\&quot;:3,\\&quot;timeout\\&quot;:-1}&quot;,&quot;enabled&quot;:true}\n</code></pre>\n<p>同样可以看到之前启动 soul-examples-http, soul-examples-dubbo 时的类似log, 显然sofa的服务也注册到了soul</p>\n<p>访问 <a href=\"http://127.0.0.1:9095/#/plug/sofa\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9095/#/plug/sofa</a> 同样可以看到 刚起的实例服务注册了rule 和selector 到了soul上</p>\n<p><img src=\"/2021/01/19/soul-gateway-src-code-learning-04/00register.png\" alt=\"img\"></p>\n<p>尝试通过网关访问 sofa 服务</p>\n<pre><code class=\"bash\">$curl -i localhost:9195/sofa/findAll\nHTTP/1.1 200 OK\ncontent-length: 0\n</code></pre>\n<p>只能得到空200响应, 这显然是不正确的</p>\n<p>通过追踪 soul-web/src/main/java/org/dromara/soul/web/handler/SoulWebHandler.java 中静态内部类DefaultSoulPluginChain实现了 soul-plugin/soul-plugin-api/src/main/java/org/dromara/soul/plugin/api/SoulPluginChain.java 接口</p>\n<pre><code class=\"java\">public Mono&lt;Void&gt; execute(final ServerWebExchange exchange) {\n            return Mono.defer(() -&gt; {\n                if (this.index &lt; plugins.size()) {\n                    SoulPlugin plugin = plugins.get(this.index++);\n                    Boolean skip = plugin.skip(exchange);\n                    if (skip) {\n                        return this.execute(exchange);\n                    }\n                    return plugin.execute(exchange, this);\n                }\n//              由于需要命中的sofa plugin没有加载, 所以最后返回\n                return Mono.empty();\n            });\n        }\n</code></pre>\n<p>所以我们要做的就是在soul-bootstrap/pom.xml文件中添加</p>\n<pre><code class=\"xml\">&lt;!-- sofa plugin start --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.alipay.sofa&lt;/groupId&gt;\n  &lt;artifactId&gt;sofa-rpc-all&lt;/artifactId&gt;\n  &lt;version&gt;5.7.6&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n  &lt;artifactId&gt;curator-client&lt;/artifactId&gt;\n  &lt;version&gt;4.0.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n  &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n  &lt;version&gt;4.0.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n  &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n  &lt;version&gt;4.0.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.dromara&lt;/groupId&gt;\n  &lt;artifactId&gt;soul-spring-boot-starter-plugin-sofa&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- sofa plugin end --&gt;\n</code></pre>\n<p>重启bootstrap 可以看到sofa plugin被加载了</p>\n<p><img src=\"/2021/01/19/soul-gateway-src-code-learning-04/01sofa_plugin_log.png\" alt=\"img\"></p>\n<p>再次尝试请求 </p>\n<pre><code class=\"bash\">curl localhost:9195/sofa/findAll\n{&quot;code&quot;:200,&quot;message&quot;:&quot;Access to success!&quot;,&quot;data&quot;:{&quot;name&quot;:&quot;hello world Soul Sofa , findAll&quot;,&quot;id&quot;:&quot;1392929023&quot;}}%\n</code></pre>\n<p>类似divide,dubbo 使用了 soul-client/soul-client-sofa/src/main/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessor.java 去处理 拥有 @SoulSofaClient 注解的接</p>\n<p>接下来在 打断点追踪下 soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/SofaPlugin.java#doExecute</p>\n<pre><code class=\"java\">protected Mono&lt;Void&gt; doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n  //这里的获取的值值是在 soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/param/BodyParamPlugin.java 中处理的\n    String body = exchange.getAttribute(Constants.SOFA_PARAMS);\n    SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n    assert soulContext != null;\n    MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n  //这里的metadata具体内容 eg: metaData -&gt; {MetaData@11407} &quot;MetaData(id=null, appName=sofa, contextPath=/sofa, path=/sofa/findAll, rpcType=sofa, serviceName=org.dromara.soul.examples.dubbo.api.service.DubboTestService, methodName=findAll, parameterTypes=null, rpcExt={&quot;loadbalance&quot;:&quot;hash&quot;,&quot;retries&quot;:3,&quot;timeout&quot;:-1}, enabled=true)&quot;\n    if (!checkMetaData(metaData)) {\n        assert metaData != null;\n        log.error(&quot; path is :{}, meta data have error.... {}&quot;, soulContext.getPath(), metaData.toString());\n        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n        return WebFluxResultUtils.result(exchange, error);\n    }\n    if (StringUtils.isNoneBlank(metaData.getParameterTypes()) &amp;&amp; StringUtils.isBlank(body)) {\n        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        Object error = SoulResultWrap.error(SoulResultEnum.SOFA_HAVE_BODY_PARAM.getCode(), SoulResultEnum.SOFA_HAVE_BODY_PARAM.getMsg(), null);\n        return WebFluxResultUtils.result(exchange, error);\n    }\n    final Mono&lt;Object&gt; result = sofaProxyService.genericInvoker(body, metaData, exchange);\n    return result.then(chain.execute(exchange));\n}\n</code></pre>\n<p>然后通过sofaProxyService 去获取真实服务返回值</p>\n<pre><code class=\"java\">public Mono&lt;Object&gt; genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {\n    ConsumerConfig&lt;GenericService&gt; reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n    if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n        ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n        reference = ApplicationConfigCache.getInstance().initRef(metaData);\n    }\n    GenericService genericService = reference.refer();\n    Pair&lt;String[], Object[]&gt; pair;\n    if (null == body || &quot;&quot;.equals(body) || &quot;{}&quot;.equals(body) || &quot;null&quot;.equals(body)) {\n        pair = new ImmutablePair&lt;&gt;(new String[]{}, new Object[]{});\n    } else {\n        pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n    }\n    CompletableFuture&lt;Object&gt; future = new CompletableFuture&lt;&gt;();\n    RpcInvokeContext.getContext().setResponseCallback(new SofaResponseCallback&lt;Object&gt;() {\n        @Override\n        public void onAppResponse(final Object o, final String s, final RequestBase requestBase) {\n            future.complete(o);\n        }\n\n        @Override\n        public void onAppException(final Throwable throwable, final String s, final RequestBase requestBase) {\n            future.completeExceptionally(throwable);\n        }\n\n        @Override\n        public void onSofaException(final SofaRpcException e, final String s, final RequestBase requestBase) {\n            future.completeExceptionally(e);\n        }\n    });\n    genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n    return Mono.fromFuture(future.thenApply(ret -&gt; {\n        if (Objects.isNull(ret)) {\n            ret = Constants.SOFA_RPC_RESULT_EMPTY;\n        }\n        exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, ret);\n        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n        return ret;\n    })).onErrorMap(SoulException::new);\n}\n</code></pre>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}