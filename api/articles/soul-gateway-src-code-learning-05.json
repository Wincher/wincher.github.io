{"title":"soul_gateway_src_code_learning_05","slug":"soul-gateway-src-code-learning-05","date":"2021-01-19T16:03:36.000Z","updated":"2021-01-20T16:59:42.478Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-Spring-Cloud-demo\"><a href=\"#SOUL-Spring-Cloud-demo\" class=\"headerlink\" title=\"SOUL Spring Cloud demo\"></a>SOUL Spring Cloud demo</h3><p>拉了下代码,使用了当前使用 249fb1ff8711e7b531f56f89bae9650d7fb4def6 版本</p>\n<p>有了上一节的经验</p>\n<p>打开bootstrap pom中的 springcloud 和 eureka 依赖</p>\n<pre><code class=\"xml\">&lt;!--soul springCloud plugin start--&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.dromara&lt;/groupId&gt;\n  &lt;artifactId&gt;soul-spring-boot-starter-plugin-springcloud&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-commons&lt;/artifactId&gt;\n  &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;\n  &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n  &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>同时打开soul-bootstrap/src/main/resources/application-local.yml, 去掉eureka配置部分的注释 </p>\n<pre><code class=\"yaml\">eureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n  instance:\n    prefer-ip-address: true\n</code></pre>\n<p>重启bootstrap log中可以看到springcloud plugin被加载了</p>\n<pre><code class=\"bash\">2021-01-20 00:20:53.274  INFO 90869 --- [           main] o.d.s.w.configuration.SoulConfiguration  : load plugin:[springCloud] [org.dromara.soul.plugin.springcloud.SpringCloudPlugin]\n</code></pre>\n<p>soul-examples-springcloud使用eureka作为服务发现, 我们先启动 soul-examples/soul-examples-eureka/src/main/java/org/dromara/soul/examples/eureka/EurekaServerApplication.java</p>\n<p>和上一节的一样, 使用Spring Cloud插件, 访问 <a href=\"http://127.0.0.1:9095/#/system/plugin\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9095/#/system/plugin</a> 可以看到 springCloud plugin 是关闭的, 点击editor </p>\n<p>开启springCloud plugin</p>\n<p>同样可以看到之前启动 soul-examples-http, soul-examples-dubbo 时的类似log, 显然spring cloud的服务也注册到了soul</p>\n<pre><code class=\"bash\">2021-01-20 00:23:16.972  INFO 90924 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {&quot;appName&quot;:&quot;springCloud-test&quot;,&quot;context&quot;:&quot;/springcloud&quot;,&quot;path&quot;:&quot;/springcloud/order/save&quot;,&quot;pathDesc&quot;:&quot;&quot;,&quot;rpcType&quot;:&quot;springCloud&quot;,&quot;ruleName&quot;:&quot;/springcloud/order/save&quot;,&quot;enabled&quot;:true} \n2021-01-20 00:23:16.987  INFO 90924 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {&quot;appName&quot;:&quot;springCloud-test&quot;,&quot;context&quot;:&quot;/springcloud&quot;,&quot;path&quot;:&quot;/springcloud/order/findById&quot;,&quot;pathDesc&quot;:&quot;&quot;,&quot;rpcType&quot;:&quot;springCloud&quot;,&quot;ruleName&quot;:&quot;/springcloud/order/findById&quot;,&quot;enabled&quot;:true} \n2021-01-20 00:23:17.003  INFO 90924 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {&quot;appName&quot;:&quot;springCloud-test&quot;,&quot;context&quot;:&quot;/springcloud&quot;,&quot;path&quot;:&quot;/springcloud/order/path/**&quot;,&quot;pathDesc&quot;:&quot;&quot;,&quot;rpcType&quot;:&quot;springCloud&quot;,&quot;ruleName&quot;:&quot;/springcloud/order/path/**&quot;,&quot;enabled&quot;:true} \n2021-01-20 00:23:17.017  INFO 90924 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {&quot;appName&quot;:&quot;springCloud-test&quot;,&quot;context&quot;:&quot;/springcloud&quot;,&quot;path&quot;:&quot;/springcloud/order/path/**/name&quot;,&quot;pathDesc&quot;:&quot;&quot;,&quot;rpcType&quot;:&quot;springCloud&quot;,&quot;ruleName&quot;:&quot;/springcloud/order/path/**/name&quot;,&quot;enabled&quot;:true}\n</code></pre>\n<p>访问 <a href=\"http://127.0.0.1:9095/#/plug/springCloud\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9095/#/plug/springCloud</a> 同样可以看到 刚起的实例服务注册了rule 和selector 到了soul上</p>\n<p><img src=\"/2021/01/20/soul-gateway-src-code-learning-05/00springcloud_plugin_log.png\" alt=\"img\"></p>\n<p> 直接访问 spring cloud 服务</p>\n<pre><code class=\"bash\">$curl http://localhost:8884/order/findById\\?id\\=3\n{&quot;id&quot;:&quot;3&quot;,&quot;name&quot;:&quot;hello world spring cloud findById&quot;}%\n</code></pre>\n<p>正常</p>\n<p>尝试通过网关访问 spring cloud 服务</p>\n<pre><code class=\"bash\">$curl http://localhost:9195/springcloud/order/findById\\?id=3\n{&quot;id&quot;:&quot;3&quot;,&quot;name&quot;:&quot;hello world spring cloud findById&quot;}%\n</code></pre>\n<p>转发请求的核心逻辑在 soul-plugin/soul-plugin-springcloud/src/main/java/org/dromara/soul/plugin/springcloud/SpringCloudPlugin.java#doExecute</p>\n<pre><code class=\"java\">// 这里通过封装的serviceId 通过 loadBalancer 来找到服务的实例\nfinal ServiceInstance serviceInstance = loadBalancer.choose(selectorHandle.getServiceId());\n//serviceInstance的值得如下 RibbonServer{serviceId=&#39;springCloud-test&#39;, server=ip:8884, secure=false, metadata={management.port=8884}},后面就根据真实地址去请求了\n        if (Objects.isNull(serviceInstance)) {\n            Object error = SoulResultWrap.error(SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getCode(), SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n</code></pre>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}