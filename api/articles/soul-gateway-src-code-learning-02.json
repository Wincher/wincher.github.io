{"title":"soul_gateway_src_code_learning_02","slug":"soul-gateway-src-code-learning-02","date":"2021-01-15T16:15:01.000Z","updated":"2021-01-15T17:35:57.877Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-divide-plugin-auto-register\"><a href=\"#SOUL-divide-plugin-auto-register\" class=\"headerlink\" title=\"SOUL divide plugin auto register\"></a>SOUL divide plugin auto register</h3><p>上篇我们使用divide插件配置selector和rule成功将访问网关的请求转发到了baidu.com</p>\n<p>今天对divide plugin进一步的使用</p>\n<p>我们启动SOUL项目准备好的示例 soul-examples/soul-examples-http/src/main/java/org/dromara/soul/examples/http/SoulTestHttpApplication.java</p>\n<p>稍微留意一下log, 字面意思就是将接口注册到了网关上</p>\n\n    <pre><code class=\"lang-bash\">o.d.s.client.common.utils.RegisterUtils  : http<span class=\"hljs-built_in\"> client </span>register success: {<span class=\"hljs-string\">\"appName\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"context\"</span>:<span class=\"hljs-string\">\"/http\"</span>,<span class=\"hljs-string\">\"path\"</span>:<span class=\"hljs-string\">\"/http/test/**\"</span>,<span class=\"hljs-string\">\"pathDesc\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"rpcType\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,<span class=\"hljs-string\">\"port\"</span>:8188,<span class=\"hljs-string\">\"ruleName\"</span>:<span class=\"hljs-string\">\"/http/test/**\"</span>,<span class=\"hljs-string\">\"enabled\"</span>:true,<span class=\"hljs-string\">\"registerMetaData\"</span>:false} \n2021-01-16 00:22:49.555  <span class=\"hljs-builtin-name\">INFO</span> 7520 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http<span class=\"hljs-built_in\"> client </span>register success: {<span class=\"hljs-string\">\"appName\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"context\"</span>:<span class=\"hljs-string\">\"/http\"</span>,<span class=\"hljs-string\">\"path\"</span>:<span class=\"hljs-string\">\"/http/order/save\"</span>,<span class=\"hljs-string\">\"pathDesc\"</span>:<span class=\"hljs-string\">\"Save order\"</span>,<span class=\"hljs-string\">\"rpcType\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,<span class=\"hljs-string\">\"port\"</span>:8188,<span class=\"hljs-string\">\"ruleName\"</span>:<span class=\"hljs-string\">\"/http/order/save\"</span>,<span class=\"hljs-string\">\"enabled\"</span>:true,<span class=\"hljs-string\">\"registerMetaData\"</span>:false} \n2021-01-16 00:22:49.569  <span class=\"hljs-builtin-name\">INFO</span> 7520 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http<span class=\"hljs-built_in\"> client </span>register success: {<span class=\"hljs-string\">\"appName\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"context\"</span>:<span class=\"hljs-string\">\"/http\"</span>,<span class=\"hljs-string\">\"path\"</span>:<span class=\"hljs-string\">\"/http/order/path/**\"</span>,<span class=\"hljs-string\">\"pathDesc\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"rpcType\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,<span class=\"hljs-string\">\"port\"</span>:8188,<span class=\"hljs-string\">\"ruleName\"</span>:<span class=\"hljs-string\">\"/http/order/path/**\"</span>,<span class=\"hljs-string\">\"enabled\"</span>:true,<span class=\"hljs-string\">\"registerMetaData\"</span>:false} \n2021-01-16 00:22:49.585  <span class=\"hljs-builtin-name\">INFO</span> 7520 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http<span class=\"hljs-built_in\"> client </span>register success: {<span class=\"hljs-string\">\"appName\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"context\"</span>:<span class=\"hljs-string\">\"/http\"</span>,<span class=\"hljs-string\">\"path\"</span>:<span class=\"hljs-string\">\"/http/order/path/**/name\"</span>,<span class=\"hljs-string\">\"pathDesc\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"rpcType\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,<span class=\"hljs-string\">\"port\"</span>:8188,<span class=\"hljs-string\">\"ruleName\"</span>:<span class=\"hljs-string\">\"/http/order/path/**/name\"</span>,<span class=\"hljs-string\">\"enabled\"</span>:true,<span class=\"hljs-string\">\"registerMetaData\"</span>:false} \n2021-01-16 00:22:49.601  <span class=\"hljs-builtin-name\">INFO</span> 7520 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http<span class=\"hljs-built_in\"> client </span>register success: {<span class=\"hljs-string\">\"appName\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"context\"</span>:<span class=\"hljs-string\">\"/http\"</span>,<span class=\"hljs-string\">\"path\"</span>:<span class=\"hljs-string\">\"/http/order/findById\"</span>,<span class=\"hljs-string\">\"pathDesc\"</span>:<span class=\"hljs-string\">\"Find by id\"</span>,<span class=\"hljs-string\">\"rpcType\"</span>:<span class=\"hljs-string\">\"http\"</span>,<span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,<span class=\"hljs-string\">\"port\"</span>:8188,<span class=\"hljs-string\">\"ruleName\"</span>:<span class=\"hljs-string\">\"/http/order/findById\"</span>,<span class=\"hljs-string\">\"enabled\"</span>:true,<span class=\"hljs-string\">\"registerMetaData\"</span>:false}\n</code></pre>\n<p>启动后打开 <a href=\"http://127.0.0.1:9095/#/plug/divide\" target=\"_blank\" rel=\"external\">http://127.0.0.1:9095/#/plug/divide</a> admin divide plugin页面</p>\n<p><img src=\"/2021/01/16/soul-gateway-src-code-learning-02/00soul_auto_register_divide.png\" alt=\"pic\"></p>\n<p>我们发现在我们刚刚启动的示例项目中定义的接口都已经注册到了divide plugin上</p>\n\n    <pre><code class=\"lang-bash\"><span class=\"hljs-comment\"># 访问example项目获得结果</span>\n$curl <span class=\"hljs-keyword\">http</span>://localhost:<span class=\"hljs-number\">8188</span>/test/findByUserId\\?userId\\=<span class=\"hljs-number\">132</span>\n{<span class=\"hljs-string\">\"userId\"</span>:<span class=\"hljs-string\">\"132\"</span>,<span class=\"hljs-string\">\"userName\"</span>:<span class=\"hljs-string\">\"hello world\"</span>}%\n由于被gateway divide plugin 配置了代理, 访问gateway <span class=\"hljs-keyword\">http</span> path也代理到了刚启动的example下\n$curl <span class=\"hljs-keyword\">http</span>://localhost:<span class=\"hljs-number\">9195</span>/<span class=\"hljs-keyword\">http</span>/test/findByUserId\\?userId\\=<span class=\"hljs-number\">132</span>\n{<span class=\"hljs-string\">\"userId\"</span>:<span class=\"hljs-string\">\"132\"</span>,<span class=\"hljs-string\">\"userName\"</span>:<span class=\"hljs-string\">\"hello world\"</span>}%\n</code></pre>\n<p>自动注册还是很方便控制接口访问的,今天就看看是如何实现的</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-spring-boot-starter-client-springmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{soul.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</span></code></pre>\n<p> 该项目引入了 soul-spring-boot-starter-client-springmvc</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.dromara<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>soul-client-springmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$</span><span class=\"hljs-template-variable\">{project.version}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</span></code></pre>\n<p>soul-examples-http 项目中application.yml</p>\n\n    <pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">soul:</span>\n<span class=\"hljs-attr\">  http:</span>\n<span class=\"hljs-attr\">    adminUrl:</span> <span class=\"hljs-attr\">http://localhost:9095</span>\n<span class=\"hljs-attr\">    port:</span> <span class=\"hljs-number\">8188</span>\n<span class=\"hljs-attr\">    contextPath:</span> <span class=\"hljs-string\">/http</span>\n<span class=\"hljs-attr\">    appName:</span> <span class=\"hljs-string\">http</span>\n<span class=\"hljs-attr\">    full:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>配置信息用来注册到网关, 配置定义在 soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/config/SoulSpringMvcConfig.java 中</p>\n<p>请求的发起来自 soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n    public <span class=\"hljs-built_in\">Object</span> postProcessAfterInitialization(<span class=\"hljs-meta\">@NonNull</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">Object</span> bean, <span class=\"hljs-meta\">@NonNull</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> beanName) throws BeansException {\n      <span class=\"hljs-comment\">// 如果配置了full, 则整个服务的所有接口都被代理, 不需要单独配置</span>\n        <span class=\"hljs-keyword\">if</span> (soulSpringMvcConfig.isFull()) {\n            <span class=\"hljs-keyword\">return</span> bean;\n        }\n        Controller controller = AnnotationUtils.findAnnotation(bean.getClass(), Controller.<span class=\"hljs-keyword\">class</span>);\n        RestController restController = AnnotationUtils.findAnnotation(bean.getClass(), RestController.<span class=\"hljs-keyword\">class</span>);\n        RequestMapping requestMapping = AnnotationUtils.findAnnotation(bean.getClass(), RequestMapping.<span class=\"hljs-keyword\">class</span>);\n        <span class=\"hljs-keyword\">if</span> (controller != <span class=\"hljs-keyword\">null</span> || restController != <span class=\"hljs-keyword\">null</span> || requestMapping != <span class=\"hljs-keyword\">null</span>) {\n            SoulSpringMvcClient clazzAnnotation = AnnotationUtils.findAnnotation(bean.getClass(), SoulSpringMvcClient.<span class=\"hljs-keyword\">class</span>);\n            <span class=\"hljs-built_in\">String</span> prePath = <span class=\"hljs-string\">\"\"</span>;\n            <span class=\"hljs-keyword\">if</span> (Objects.nonNull(clazzAnnotation)) {\n                <span class=\"hljs-keyword\">if</span> (clazzAnnotation.path().indexOf(<span class=\"hljs-string\">\"*\"</span>) &gt; <span class=\"hljs-number\">1</span>) {\n                    <span class=\"hljs-built_in\">String</span> finalPrePath = prePath;\n                    executorService.execute(() -&gt; RegisterUtils.doRegister(buildJsonParams(clazzAnnotation, finalPrePath), url,\n                            RpcTypeEnum.HTTP));\n                    <span class=\"hljs-keyword\">return</span> bean;\n                }\n                prePath = clazzAnnotation.path();\n            }\n            <span class=\"hljs-keyword\">final</span> Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(bean.getClass());\n            <span class=\"hljs-keyword\">for</span> (Method method : methods) {\n                SoulSpringMvcClient soulSpringMvcClient = AnnotationUtils.findAnnotation(method, SoulSpringMvcClient.<span class=\"hljs-keyword\">class</span>);\n                <span class=\"hljs-keyword\">if</span> (Objects.nonNull(soulSpringMvcClient)) {\n                    <span class=\"hljs-built_in\">String</span> finalPrePath = prePath;\n                    executorService.execute(() -&gt; RegisterUtils.doRegister(buildJsonParams(soulSpringMvcClient, finalPrePath), url,\n                            RpcTypeEnum.HTTP));\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> bean;\n    }\n</code></pre>\n<p>这段逻辑判断当我们处理一个接口的时候 ,如果配置了@SoulSpringMvcClient 注解, 那么就会 调用 RegisterUtils.doRegister 将接口信息注册到admin</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> doRegister(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> json, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> url, <span class=\"hljs-keyword\">final</span> RpcTypeEnum rpcTypeEnum) {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">String</span> result = OkHttpTools.getInstance().post(url, json);\n            <span class=\"hljs-keyword\">if</span> (AdminConstants.SUCCESS.equals(result)) {\n                <span class=\"hljs-built_in\">log</span>.info(<span class=\"hljs-string\">\"{} client register success: {} \"</span>, rpcTypeEnum.getName(), json);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"{} client register error: {} \"</span>, rpcTypeEnum.getName(), json);\n            }\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-built_in\">log</span>.error(<span class=\"hljs-string\">\"cannot register soul admin param, url: {}, request body: {}\"</span>, url, json, e);\n        }\n    }\n</code></pre>\n<p>我们看到这个log是否很熟悉呢,和最开始soul-examples-http 启动 时的log对应上了</p>\n<p>至此我们了解了SOUL admin的一个优势就是低侵入自动注册接口到gateway</p>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}