{"title":"soul_gateway_src_code_learning_14","slug":"soul-gateway-src-code-learning-14","date":"2021-01-29T18:36:35.000Z","updated":"2021-01-29T19:01:49.241Z","comments":true,"excerpt":"","content":"<h3 id=\"SOUL-alibaba-dubbo-apache-dubbo-plugin-分析\"><a href=\"#SOUL-alibaba-dubbo-apache-dubbo-plugin-分析\" class=\"headerlink\" title=\"SOUL: alibaba-dubbo apache-dubbo plugin 分析\"></a>SOUL: alibaba-dubbo apache-dubbo plugin 分析</h3><p>dubbo插件主要讲http 请求 转化为dubbo请求, 实现泛化调用 soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPlugin.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">protected</span> Mono&lt;Void&gt; doExecute(<span class=\"hljs-keyword\">final</span> ServerWebExchange exchange, <span class=\"hljs-keyword\">final</span> SoulPluginChain chain, <span class=\"hljs-keyword\">final</span> SelectorData selector, <span class=\"hljs-keyword\">final</span> RuleData rule) {\n        String body = exchange.getAttribute(Constants.DUBBO_PARAMS);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        <span class=\"hljs-keyword\">assert</span> soulContext != <span class=\"hljs-keyword\">null</span>;\n      <span class=\"hljs-comment\">//  可以看到与divide插件, SpringCLoud插件的区别是这里用到了Metadata</span>\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        <span class=\"hljs-keyword\">if</span> (!checkMetaData(metaData)) {\n            <span class=\"hljs-keyword\">assert</span> metaData != <span class=\"hljs-keyword\">null</span>;\n            log.<span class=\"hljs-keyword\">error</span>(<span class=\"hljs-string\">\" path is :{}, meta data have error.... {}\"</span>, soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isNoneBlank(metaData.getParameterTypes()) &amp;&amp; StringUtils.isBlank(body)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object <span class=\"hljs-keyword\">error</span> = SoulResultWrap.<span class=\"hljs-keyword\">error</span>(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> WebFluxResultUtils.<span class=\"hljs-title\">result</span><span class=\"hljs-params\">(exchange, <span class=\"hljs-keyword\">error</span>)</span></span>;\n        }\n      <span class=\"hljs-comment\">//进行泛化调用</span>\n        <span class=\"hljs-keyword\">final</span> Mono&lt;Object&gt; result = dubboProxyService.genericInvoker(body, metaData, exchange);\n        <span class=\"hljs-keyword\">return</span> result.then(chain.execute(exchange));\n    }\n</code></pre>\n<p>soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/AlibabaDubboPlugin.java 和ApacheDubboPlugin的逻辑基本一致, 只是下面部分有一点差别</p>\n\n    <pre><code class=\"lang-java\">......\n  <span class=\"hljs-comment\">//进行泛化调用</span>\n        Object result = alibabaDubboProxyService.genericInvoker(body, metaData);\n<span class=\"hljs-comment\">//将结果放到 exchange中</span>\n        <span class=\"hljs-built_in\">if</span> (Objects.nonNull(result)) {\n            exchange.getAttributes().<span class=\"hljs-built_in\">put</span>(Constants.DUBBO_RPC_RESULT, result);\n        } <span class=\"hljs-built_in\">else</span> {\n            exchange.getAttributes().<span class=\"hljs-built_in\">put</span>(Constants.DUBBO_RPC_RESULT, Constants.DUBBO_RPC_RESULT_EMPTY);\n        }\n        exchange.getAttributes().<span class=\"hljs-built_in\">put</span>(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n        <span class=\"hljs-built_in\">return</span> chain.execute(exchange);\n    }\n</code></pre>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-keyword\">Object</span>&gt; genericInvoker(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> body, <span class=\"hljs-keyword\">final</span> MetaData metaData, <span class=\"hljs-keyword\">final</span> ServerWebExchange exchange) <span class=\"hljs-keyword\">throws</span> SoulException {\n        <span class=\"hljs-comment\">// issue(https://github.com/dromara/soul/issues/471), add dubbo tag route</span>\n        <span class=\"hljs-keyword\">String</span> dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE);\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) {\n            RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders);\n        }\n        ReferenceConfig&lt;GenericService&gt; reference = ApplicationConfigCache.getInstance().<span class=\"hljs-built_in\">get</span>(metaData.getPath());\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.<span class=\"hljs-built_in\">get</span>();\n        Pair&lt;<span class=\"hljs-keyword\">String</span>[], <span class=\"hljs-keyword\">Object</span>[]&gt; pair;\n        <span class=\"hljs-keyword\">if</span> (ParamCheckUtils.dubboBodyIsEmpty(body)) {\n            pair = <span class=\"hljs-keyword\">new</span> ImmutablePair&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>[]{}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Object</span>[]{});\n        } <span class=\"hljs-keyword\">else</span> {\n            pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture&lt;<span class=\"hljs-keyword\">Object</span>&gt; future = genericService.$invokeAsync(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        <span class=\"hljs-keyword\">return</span> Mono.fromFuture(future.thenApply(ret -&gt; {\n            <span class=\"hljs-keyword\">if</span> (Objects.isNull(ret)) {\n                ret = Constants.DUBBO_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            <span class=\"hljs-keyword\">return</span> ret;\n        })).onErrorMap(exception -&gt; exception <span class=\"hljs-keyword\">instanceof</span> GenericException ? <span class=\"hljs-keyword\">new</span> SoulException(((GenericException) exception).getExceptionMessage()) : <span class=\"hljs-keyword\">new</span> SoulException(exception));\n    }\n}\n</code></pre>\n<p>soul-common/src/main/java/org/dromara/soul/common/dto/MetaData.java</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-variable\">@Data</span>\n<span class=\"hljs-variable\">@ToString</span>\n<span class=\"hljs-variable\">@Builder</span>\n<span class=\"hljs-variable\">@NoArgsConstructor</span>\n<span class=\"hljs-variable\">@AllArgsConstructor</span>\npublic class MetaData implements Serializable {\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">id</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">appName</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">contextPath</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">path</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">rpcType</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">serviceName</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">methodName</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">parameterTypes</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">rpcExt</span>;\n    <span class=\"hljs-selector-tag\">private</span> <span class=\"hljs-selector-tag\">Boolean</span> <span class=\"hljs-selector-tag\">enabled</span>;\n}\n</code></pre>\n<p>Medata中保存了dubbo接口的信息</p>\n<ul>\n<li>每一个dubbo接口方法，都会有一条metadata与之对应，可以在 soul-admin –&gt; Metadata中查看</li>\n</ul>\n<ul>\n<li>path: 即http路径</li>\n<li>rpc扩展参数，对应为dubbo接口的一些配置，调整的化，请在这里修改，支持json格式，以下字段：</li>\n</ul>\n\n    <pre><code class=\"lang-json\">{<span class=\"hljs-string\">\"timeout\"</span>:<span class=\"hljs-number\">10000</span>,<span class=\"hljs-string\">\"group\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-keyword\">version</span><span class=\"hljs-string\">\":\"</span><span class=\"hljs-string\">\",\"</span>loadbalance<span class=\"hljs-string\">\":\"</span><span class=\"hljs-string\">\",\"</span>retries<span class=\"hljs-comment\">\":1}</span>\n</code></pre>\n<p>在soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/response/DubboResponsePlugin.java中返回result, alibaba-dubbo中的DubboResponsePlugin.java 同理</p>\n\n    <pre><code class=\"lang-java\">@Override\npublic Mono&lt;Void&gt; execute(final ServerWebExchange exchange, final SoulPluginChain chain) {\n    <span class=\"hljs-keyword\">return</span> chain.execute<span class=\"hljs-function\"><span class=\"hljs-params\">(exchange)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(Mono.defer(() -&gt; {\n        final Object result = exchange.getAttribute(Constants.DUBBO_RPC_RESULT);\n        <span class=\"hljs-keyword\">if</span> (Objects.isNull(result)) {\n            Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), <span class=\"hljs-literal\">null</span>);\n            <span class=\"hljs-keyword\">return</span> WebFluxResultUtils.result(exchange, error);\n        }\n        Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));\n        <span class=\"hljs-keyword\">return</span> WebFluxResultUtils.result(exchange, success);\n    }))</span>;\n}\n</span></code></pre>\n","categories":[],"tags":[{"name":"SOUL","path":"api/tags/SOUL.json"}]}